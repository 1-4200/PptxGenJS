{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","className","href","src","logo","width","height","alt","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","onClick","ev","window","open","pptx","pptxgen","addSlide","addText","x","y","w","h","fontSize","fill","align","writeFile","console","log","version","runDemo","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"6NAsGeA,MAhGf,WAgBC,OACC,6BACC,yBAAKC,UAAU,kDACd,uBAAGA,UAAU,eAAeC,KAAK,KAChC,yBAAKC,IAAKC,IAAMC,MAAM,KAAKC,OAAO,KAAKL,UAAU,gCAAgCM,IAAI,KADtF,aAIA,4BACCN,UAAU,iBACVO,KAAK,SACLC,cAAY,WACZC,cAAY,iBACZC,gBAAc,gBACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAMZ,UAAU,yBAGjB,yBAAKA,UAAU,2BAA2Ba,GAAG,iBAC5C,wBAAIb,UAAU,sBACb,wBAAIA,UAAU,mBACb,uBAAGA,UAAU,WAAWC,KAAK,KAA7B,QACM,0BAAMD,UAAU,WAAhB,gBAIR,0BAAMA,UAAU,4BACf,4BACCO,KAAK,SACLP,UAAU,yCACVc,QAAS,SAAAC,GACRC,OAAOC,KAAK,8CAA8C,KAJ5D,aASA,4BACCV,KAAK,SACLP,UAAU,yCACVc,QAAS,SAAAC,GACRC,OAAOC,KAAK,yCAAyC,KAJvD,kBAUA,4BACCV,KAAK,SACLP,UAAU,yCACVc,QAAS,SAAAC,GACRC,OAAOC,KAAK,+DAA+D,KAJ7E,eAaH,0BAAMjB,UAAU,aACf,yBAAKA,UAAU,kBACd,wBAAIA,UAAU,aAAd,cACA,uBAAGA,UAAU,QAAb,oFACA,wBAAIA,UAAU,SAEd,wBAAIA,UAAU,aAAd,aACA,yBAAKA,UAAU,QACd,0BAAMA,UAAU,uBAnFP,iPAsFV,4BAAQO,KAAK,SAASP,UAAU,uBAAuBc,QAAS,SAAAC,GAAE,OAhFtE,WACC,IAAIG,EAAO,IAAIC,IACHD,EAAKE,WACXC,QAAQ,cAAe,CAAEC,EAAG,EAAGC,EAAG,EAAGC,EAAG,MAAOC,EAAG,EAAGC,SAAU,GAAIC,KAAM,SAAUC,MAAO,WAChGV,EAAKW,UAAU,mBAEfC,QAAQC,IAAR,yBAA8Bb,EAAKc,UA0EsCC,KAAtE,gBCjFeC,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,sCEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.44d0f713.chunk.js","sourcesContent":["import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n//import pptxgen from \"./pptxgen.es.js\"; // LOCAL DEV TESTING src=`PptxGenJS/dist`\nimport pptxgen from \"pptxgenjs\"; // react-app webpack will use package.json `\"module\": \"dist/pptxgen.es.js\"` value\n\nfunction App() {\n\tconst demoCode = `import pptxgen from \"pptxgenjs\";\\n\nlet pptx = new pptxgen();\nlet slide = pptx.addSlide();\nslide.addText(\"React Demo!\", \\{ x:1, y:1, w:'80%', h:1, fontSize:36, fill:'eeeeee', align:'center' \\});\npptx.writeFile(\"react-demo.pptx\");`;\n\n\tfunction runDemo() {\n\t\tlet pptx = new pptxgen();\n\t\tlet slide = pptx.addSlide();\n\t\tslide.addText(\"React Demo!\", { x: 1, y: 1, w: \"80%\", h: 1, fontSize: 36, fill: \"eeeeee\", align: \"center\" });\n\t\tpptx.writeFile(\"react-demo.pptx\");\n\n\t\tconsole.log(`pptx.version = ${pptx.version}`);\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n\t\t\t\t<a className=\"navbar-brand\" href=\"#\">\n\t\t\t\t\t<img src={logo} width=\"30\" height=\"30\" className=\"d-inline-block align-top mr-2\" alt=\"\" />\n\t\t\t\t\tPptxGenJS\n\t\t\t\t</a>\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"navbar-toggler\"\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tdata-toggle=\"collapse\"\n\t\t\t\t\tdata-target=\"#navbarColor01\"\n\t\t\t\t\taria-controls=\"navbarColor01\"\n\t\t\t\t\taria-expanded=\"false\"\n\t\t\t\t\taria-label=\"Toggle navigation\"\n\t\t\t\t>\n\t\t\t\t\t<span className=\"navbar-toggler-icon\"></span>\n\t\t\t\t</button>\n\n\t\t\t\t<div className=\"collapse navbar-collapse\" id=\"navbarColor01\">\n\t\t\t\t\t<ul className=\"navbar-nav mr-auto\">\n\t\t\t\t\t\t<li className=\"nav-item active\">\n\t\t\t\t\t\t\t<a className=\"nav-link\" href=\"#\">\n\t\t\t\t\t\t\t\tHome <span className=\"sr-only\">(current)</span>\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t\t<form className=\"form-inline my-2 my-lg-0\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tclassName=\"btn btn-outline-info mx-3 my-2 my-sm-0\"\n\t\t\t\t\t\t\tonClick={ev => {\n\t\t\t\t\t\t\t\twindow.open(\"https://gitbrent.github.io/PptxGenJS/demo/\", true);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tDemo Page\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tclassName=\"btn btn-outline-info mx-3 my-2 my-sm-0\"\n\t\t\t\t\t\t\tonClick={ev => {\n\t\t\t\t\t\t\t\twindow.open(\"https://github.com/gitbrent/PptxGenJS\", true);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tGitHub Project\n\t\t\t\t\t\t</button>\n\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tclassName=\"btn btn-outline-info mx-3 my-2 my-sm-0\"\n\t\t\t\t\t\t\tonClick={ev => {\n\t\t\t\t\t\t\t\twindow.open(\"https://gitbrent.github.io/PptxGenJS/docs/installation.html\", true);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tAPI Docs\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t</nav>\n\n\t\t\t<main className=\"container\">\n\t\t\t\t<div className=\"jumbotron mt-5\">\n\t\t\t\t\t<h1 className=\"display-4\">React Demo</h1>\n\t\t\t\t\t<p className=\"lead\">Sample React application to demonstrate using the PptxGenJS library as a module.</p>\n\t\t\t\t\t<hr className=\"my-4\" />\n\n\t\t\t\t\t<h5 className=\"text-info\">Demo Code</h5>\n\t\t\t\t\t<pre className=\"my-4\">\n\t\t\t\t\t\t<code className=\"language-javascript\">{demoCode}</code>\n\t\t\t\t\t</pre>\n\n\t\t\t\t\t<button type=\"button\" className=\"btn btn-success w-25\" onClick={ev => runDemo()}>\n\t\t\t\t\t\tRun Demo\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</main>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.bcad93ae.svg\";"],"sourceRoot":""}